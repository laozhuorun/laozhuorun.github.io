<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victor_Lo</title>
  <subtitle>My programming time space</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://laozhuorun.me/"/>
  <updated>2017-02-09T08:22:07.488Z</updated>
  <id>http://laozhuorun.me/</id>
  
  <author>
    <name>Victor_Lo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular2 入门-使用angular-cli快速建立项目</title>
    <link href="http://laozhuorun.me//blog/2017/02/Angular2-%E5%85%A5%E9%97%A8-%E4%BD%BF%E7%94%A8angular-cli%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E9%A1%B9%E7%9B%AE.html"/>
    <id>http://laozhuorun.me//blog/2017/02/Angular2-入门-使用angular-cli快速建立项目.html</id>
    <published>2017-02-09T06:34:39.000Z</published>
    <updated>2017-02-09T08:22:07.488Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://angular.cn/resources/images/logos/angular2/angular.svg" alt="Angular2"></p>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>时下web前端发展迅猛，新框架层出不穷，大家都知道三驾马车Vue2，Angular2，React。国内Vue2非常热门，百度热点趋势以1000%的涨幅在增加。Angular2在国外非常受欢迎，在国内的粉丝还非常少，文章不多，究其原因有这么几点:</p>
<ol>
<li>angular本身概念难懂，并且学习曲线陡峭，上手困难;</li>
<li>使用typescript开发，用到很多es6特性;</li>
<li>配置太多，复杂，工程架构搭建上手难度大。</li>
</ol>
<p>本文为了解决项目搭建的问题，详细的一步步演示了如何使用angular-cli搭建angular2项目。</p>
<h2 id="2-Angular-CLI简介"><a href="#2-Angular-CLI简介" class="headerlink" title="2 Angular-CLI简介"></a>2 Angular-CLI简介</h2><p>Angular-CLI 是 Google Angular 核心团队提供的开发工具，是Angluar2官方推荐的构建工具，集成了大量的 NodeJS 模块，例如：webpack，karma，asmine，typescript 编译器等。只要一条命令就能帮你自动创建项目的目录结构、自动帮你生成 Component 骨架代码并自动添加依赖、自动热加载代码、对 AngularMaterial2 组件库提供了内置支持等等。</p>
<p>生产中搭建Angular2的前端架构一般有三种选择：</p>
<ol>
<li>自己一点点的搭建，这种对开发者要求比较高，必须对框架具有很深入的理解和很丰富的使用经验，否则搭建起来会遇到非常多的问题；</li>
<li>直接使用Angular2 seed，一些国外优秀程序员在github上已经贡献了，非常感激！</li>
<li>使用angular2提供的Angular CLI来快速搭建，他本质也是使用了webpack来编译，打包，压缩等构建的事情，适合想用<em>webpack</em>的特性又不想学习<em>webpack</em>那些复杂的配置的开发者；</li>
</ol>
<h2 id="3-AngularCLI主要特性"><a href="#3-AngularCLI主要特性" class="headerlink" title="3.AngularCLI主要特性"></a>3.AngularCLI主要特性</h2><ol>
<li>Angular CLI 可以快速搭建框架，创建module，service，class，directive等；</li>
<li>具有webpack的功能，代码分割（code splitting），按需加载；</li>
<li>代码打包压缩；</li>
<li>模块测试，端到端测试；</li>
<li>热部署，有改动立即重新编译，不用刷新浏览器；而且速度很快</li>
<li>有开发环境，测试环境，生产环境的配置，不用自己操心</li>
<li>sass，less的预编译Angular CLI都会自动识别后缀来编译</li>
<li>typescript的配置，Angular CLI在创建应用时都可以自己配置</li>
<li>在创建好的工程也可以做一些个性化的配置，webpack的具体配置还不支持，未来可能会增加；</li>
<li>Angular CLI创建的工程结构是最佳实践，生产可用；</li>
</ol>
<h2 id="4-开始搭建Angluar2项目"><a href="#4-开始搭建Angluar2项目" class="headerlink" title="4.开始搭建Angluar2项目"></a>4.开始搭建Angluar2项目</h2><p>说了这么多废话，我们现在马上开始创建一个Angluar2项目吧</p>
<p>在创建项目之前你自行安装好<code>NodeJS 5.0</code>以上，<code>NPM 3.0</code>以上并且安装好 <code>Python2.7</code>(注意不支持3.6)，并且修改npm为国内源（<em>淘宝</em> or <em>cnpmjs</em>）以提高npm包的下载速度</p>
<h3 id="安装-Angular-CLI"><a href="#安装-Angular-CLI" class="headerlink" title="安装 Angular CLI"></a>安装 Angular CLI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">windows： npm install -g angular-cli</div><div class="line"></div><div class="line">macOS: sudo npm install -g angular-cli</div></pre></td></tr></table></figure>
<h3 id="创建Angluar-2项目"><a href="#创建Angluar-2项目" class="headerlink" title="创建Angluar 2项目"></a>创建Angluar 2项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new project_name,project_name是你的项目名；</div></pre></td></tr></table></figure>
<p><img src="http://ok0d190vi.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170209150611.jpg" alt="创建ng2项目"></p>
<p>上图就是创建的过程，此时在创建中，npm正在下载相关的包，时间可能会比较长，请耐心等待10分钟左右就可以看到 successfully created的成果提示，现在我们已经成功的创建了一个Ng2项目；</p>
<p>我们来看一下项目结构（推荐使用VSCode打开）：</p>
<p><img src="http://ok0d190vi.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170209151600.jpg" alt="ng2项目结构"></p>
<ul>
<li><em>angular-cli.json</em> ：angular-cli的配置文件；</li>
<li><em>karma.conf.js</em>：测试配置文件，Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用；</li>
<li><em>tslint.json</em>：typescript的lint配置文件；</li>
<li><em>protractor.conf.js</em>：端到端的测试配置文件，protractor是 ng 团队构建的一个端对端的测试运行工具,模拟用户交互,帮助你验证你的Angular应用的运行状况；</li>
<li><em>polyfills.ts</em>：导入es6模块的配置文件；</li>
<li><em>main.ts</em>：angular工程的引导启动文件；</li>
<li><em>style.css</em>：全局样式；</li>
<li><em>ts.config.json</em>：typescript配置文件；</li>
<li><em>typings.d.ts</em>：typescript的声明文件；</li>
<li>app.component.css/html/spec.ts/ts：默认生成的ng2组件</li>
</ul>
<p>这些配置都是angular2的生产项目中需要配置的文件，我们只用了一个命令，看来angular-cli已经帮我们做了很多事情，接下来你只需要使用这些工具就好了；</p>
<h3 id="启动Angluar2项目"><a href="#启动Angluar2项目" class="headerlink" title="启动Angluar2项目"></a>启动Angluar2项目</h3><p>首先让我们切换到刚刚创建的ng2目录然后运行npm start命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ng2</div><div class="line">npm start</div></pre></td></tr></table></figure>
<p>然后浏览器访问 <code>Http://localhost:4200</code>，即可看到</p>
<p><img src="http://ok0d190vi.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170209152918.jpg" alt="localhost:4200"></p>
<blockquote>
<p>熟悉npm的同学应该都知道：<code>npm start</code>，这个命令写在package.json文件scripts的start字段中，可以自定义命令来配置一个服务器环境和安装一系列的必要程序。</p>
<p>我们来看下package.json 文件的script字段</p>
<p><img src="http://ok0d190vi.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170209153556.jpg" alt="package.json"></p>
<p>此时在cmd中输入npm start命令相当于执行<code>ng server</code>命令，默认启动的端口是4200，如果你想指定端口启动，把start稍作修改就好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; &quot;start&quot;: &quot;ng serve --host 0.0.0.0 --port 5200 --live-reload-port 5201&quot;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>live-reload-port ：gulp即时刷新 <code>livereload server</code>,修改项目src中任意的文件都可以看到浏览器自动刷新，尝试的修改一下app.component.ts中的文字，看看热部署是否马上生效？yes！it does！</p>
<p>如果package.json文件没有设置start，则将直接启动node server，可以看到Script中还有其他的字段，使用的方法以及原理，与start是一致的</p>
<p>关于Angluar-cli使用的几个基本命令</p>
<table>
<thead>
<tr>
<th><em>Scaffold</em></th>
<th><em>Usage</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>Component</td>
<td>ng g component new-component</td>
</tr>
<tr>
<td>Directive</td>
<td>ng g directive new-directive</td>
</tr>
<tr>
<td>Pipe</td>
<td>ng g pipe new-pipe</td>
</tr>
<tr>
<td>Service</td>
<td>ng g service new-service</td>
</tr>
<tr>
<td>Class</td>
<td>ng g class new-class</td>
</tr>
<tr>
<td>Interface</td>
<td>ng g interface new-interface</td>
</tr>
<tr>
<td>Enum</td>
<td>ng g enum new-enum</td>
</tr>
<tr>
<td>Module</td>
<td>ng g module my-module</td>
</tr>
</tbody>
</table>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://angular.cn/resources/images/logos/angular2/angular.svg&quot; alt=&quot;Angular2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;header
    
    </summary>
    
      <category term="前端" scheme="http://laozhuorun.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Angluar 2" scheme="http://laozhuorun.me/categories/%E5%89%8D%E7%AB%AF/Angluar-2/"/>
    
    
      <category term="前端" scheme="http://laozhuorun.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Angluar 2" scheme="http://laozhuorun.me/tags/Angluar-2/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 简介</title>
    <link href="http://laozhuorun.me//blog/2017/02/Webpack-%E7%AE%80%E4%BB%8B.html"/>
    <id>http://laozhuorun.me//blog/2017/02/Webpack-简介.html</id>
    <published>2017-02-09T03:38:17.000Z</published>
    <updated>2017-02-09T07:19:50.320Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ok0d190vi.bkt.clouddn.com/1059768984-56effff2d75c0_articlex.png" alt="Webpack"></p>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>博主最近在学习Angluar 2，发现学习曲线还是蛮陡峭的，Angluar 2集成了大量的新的前端技术，如果你之前没有接触过前端，从现在起要开始有心里准备了哦（心里一万只草泥马正在路过~~），在学习NG2之前我们先了解一下Webpack，目前前端最火的打包工具。</p>
<h2 id="2-Webpack是什么"><a href="#2-Webpack是什么" class="headerlink" title="2.Webpack是什么"></a>2.Webpack是什么</h2><p>随着前端项目越来越复杂（尤其是大型SPA），以及命名空间混乱，一系列模块加载器随之而生(前端的同学应该深有体会)，最有名的加载器有：Webpack、RequireJS、SeaJS、Bowserify，今天我们的主角是Webpack。</p>
<p>Webpack是一个强力的模块打包器。 所谓<em>包(bundle)</em>就是一个JavaScript文件，它把一堆<em>资源(assets)</em>合并在一起，以便它们可以在同一个文件请求中发回给客户端。 包中可以包含JavaScript、CSS样式、HTML以及很多其它类型的文件。</p>
<blockquote>
<p>bundle：后端同学应该对bundle一点都不陌生，在.net ,java和php中都有（主要以动态压缩为主，即程序启动后压缩文件并存储在内存中，因此也有不少暗坑），主要作用是对Js和Css进行打包压缩，在减少网页请求数量的同时提高网页的打开速度，同时一定程度上减少对服务器资源的访问压力</p>
</blockquote>
<h2 id="3-Webpack特性功能？"><a href="#3-Webpack特性功能？" class="headerlink" title="3.Webpack特性功能？"></a>3.Webpack特性功能？</h2><ul>
<li>代码分离</li>
</ul>
<blockquote>
<p>Webpack有两种依赖声明方式：同步与异步。异步方式，将依赖分割成多个节点，然后每个节点形成一个新的文件块。经过优化后的文件块树，会以一个个文件形式分发出去（仅仅打包成一个大文件形式是很低效的，详见）。</p>
</blockquote>
<ul>
<li>加载器插件</li>
</ul>
<blockquote>
<p>原生的Webpack只能处理JS文件，使用加载器插件，可以将其他资源专为JS资源。通过这种方式来加载，每一种资源都可以被Webpack看作是一个模块来加载。</p>
</blockquote>
<ul>
<li>智能模块解析</li>
</ul>
<blockquote>
<p>Webpack内置一个智能加载模块，可以用于处理几乎所有的第三方库。它甚至可以解析依赖声明的表达式，比如 require(“./templates” + name + “.jade”)。Webpack会处理最常见的JS模块标准：CommonJS 和 AMD。</p>
</blockquote>
<ul>
<li>插件系统</li>
</ul>
<blockquote>
<p>Webpack的最大特点，就是配套了非常丰富的插件系统。大部分内置特性功能都是基于这套插件系统。它可以让你根据需要自定义Webpack，将一般插件作为开源项目发布出去。</p>
</blockquote>
<h2 id="4-Webpack安装"><a href="#4-Webpack安装" class="headerlink" title="4.Webpack安装"></a>4.Webpack安装</h2><p>通过NPM包管理器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure>
<p>项目中初始化Webpack</p>
<p>最优的方式就是，在项目中声明Webpack依赖。通过声明依赖，可以选择一个本地的Webpack版本，而不需要使用全局声明的版本。</p>
<p>添加一个npm 配置文件package.json：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>然后需要回答一系列问题。如果希望把自己项目发布到npm上面，这些问题的回答非常重要。（如果不需要的话，一直回车就好啦）</p>
<p>安装webpack、添加依赖到package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack --save-dev</div></pre></td></tr></table></figure>
<p>其中–save-dev就是声明在开发阶段需要用到webpack，并且自动把webpack依赖写到package.json配置文件上面，生产环境就不需要安装（上生产环境时候，webpack已经把项目打包好啦，不需要它老人家出马了^_^）</p>
<h2 id="5-Webpack在Angluar-2中的使用"><a href="#5-Webpack在Angluar-2中的使用" class="headerlink" title="5. Webpack在Angluar 2中的使用"></a>5. Webpack在Angluar 2中的使用</h2><p>在Angular2项目中，我们通过一个JavaScript配置文件<code>webpack.config.js</code>来决定Webpack做什么以及如何做。</p>
<ul>
<li><p>入口与输出(Entries and outputs)</p>
<blockquote>
<p>我们给Webpack提供一个或多个<em>入口</em>文件，来让它查找与合并那些从这些入口点发散出去的依赖。 在下面这个例子中，我们的入口点是该应用的根文件:<code>src/main.ts</code>：</p>
<p><code>webpack.config.js(signle entry)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; entry: &#123;</div><div class="line">&gt;   app: &apos;src/app.ts&apos;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p><code>src/main.ts</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; import &#123; Component &#125; from &apos;@angular/core&apos;;</div><div class="line">&gt;</div><div class="line">&gt; @Component(&#123;</div><div class="line">&gt;   ...</div><div class="line">&gt; &#125;)</div><div class="line">&gt; export class AppComponent &#123;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>这里，Webpack看到我们正在导入<em>@angular/core</em>，于是就这个文件加入到它的依赖列表里，为(有可能)把该文件打进包中做准备。 它打开<em>@angular/core</em>并追踪由<em>该文件的</em><code>import</code>语句构成的网络，直到构建出从<code>app.ts</code>往下的整个依赖图谱。</p>
<p>然后它把这些文件<strong>输出</strong>到当前配置所指定的<em>包文件</em><code>app.js</code>中：</p>
<p><code>webpack.config.js(signle entry)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; output: &#123;</div><div class="line">&gt;   filename: &apos;app.js&apos;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>这个<code>app.js</code>输出包是个单一的JavaScript文件，它包含程序的源码及其所有依赖。 后面我们将在<code>index.html</code>中用``标签来加载它。</p>
<hr>
<p>我们可能不会希望把所有东西打进一个巨型包，而更喜欢把多变的应用代码从相对稳定的第三方模块中分离出来。</p>
<p>所以要修改配置，以获得两个入口点：<code>app.ts</code>和<code>vendor.ts</code>：</p>
<p>webpack.config.js(two entries)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; entry: &#123;</div><div class="line">&gt;   app: &apos;src/app.ts&apos;,</div><div class="line">&gt;   vendor: &apos;src/vendor.ts&apos;</div><div class="line">&gt; &#125;,</div><div class="line">&gt;</div><div class="line">&gt; output: &#123;</div><div class="line">&gt;   filename: &apos;[name].js&apos;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>Webpack会构造出两个独立的依赖图谱，并产出<em>两个</em>包文件：一个叫做<code>app.js</code>，它只包含我们的应用代码；另一个叫做<code>vendor.js</code>，它包含所有的第三方依赖。</p>
<p><code>在输出文件名中出现的</code>[name]<code>是一个Webpack的*占位符*，它将被替换为入口点的名字，分别是</code>app<code>和</code>vendor。</p>
</blockquote>
</li>
<li><p>加载器(Loader)</p>
<blockquote>
<p>Webpack可以打包任何类型的文件：JavaScript、TypeScript、CSS、SASS、LESS、图片、HTML以及字体文件等等。 Webpack本身并不知道该如何处理这些非JavaScript文件。 我们要通过<em>加载器</em>来告诉它如何把这些文件处理成JavaScript文件。 在这里，我们为TypeScript和CSS文件配置了加载器。</p>
<p>webpack.config.js(two entries):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; loaders: [</div><div class="line">&gt;   &#123;</div><div class="line">&gt;     test: /\.ts$/</div><div class="line">&gt;     loaders: &apos;ts&apos;</div><div class="line">&gt;   &#125;,</div><div class="line">&gt;   &#123;</div><div class="line">&gt;     test: /\.css$/</div><div class="line">&gt;     loaders: &apos;style!css&apos;</div><div class="line">&gt;   &#125;</div><div class="line">&gt; ]</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>当Webpack遇到像这样的<code>import</code>语句时……</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; import &#123; AppComponent &#125; from &apos;./app.component.ts&apos;;</div><div class="line">&gt; import &apos;uiframework/dist/uiframework.css&apos;;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>……它会使用<code>test</code>后面的正则表达式进行模式匹配。如果一个模式匹配上文件名，Webpack就用它所关联的加载器处理这个文件。</p>
<p>第一个<code>import</code>文件匹配上了<code>.ts</code>模式，于是Webpack就用<code>awesome-typescript-loader</code>加载器处理它。 导入的文件没有匹配上第二个模式，于是它的加载器就被忽略了。</p>
<p>第二个<code>import</code>匹配上了第二个<code>.css</code>模式，它有两个用叹号字符(<code>!</code>)串联起来的加载器。 Webpack会<em>从右到左</em>逐个应用串联的加载器，于是它先应用了<code>css</code>加载器(用来平面化CSS的<code>@import</code>和<code>url(...)</code>语句)， 然后应用了<code>style</code>加载器(用来把css追加到页面上的**元素中)。</p>
</blockquote>
</li>
</ul>
<p>有关Webpack的简介先简述到这里，由于angluar-cli 中已经集成了webpack，我们不再需要单独安装，大家对webpack有个基本的了解就可以了，这里就不再做更加深入的探讨了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ok0d190vi.bkt.clouddn.com/1059768984-56effff2d75c0_articlex.png&quot; alt=&quot;Webpack&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=
    
    </summary>
    
      <category term="前端" scheme="http://laozhuorun.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Angluar 2" scheme="http://laozhuorun.me/categories/%E5%89%8D%E7%AB%AF/Angluar-2/"/>
    
    
      <category term="前端" scheme="http://laozhuorun.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Angluar 2" scheme="http://laozhuorun.me/tags/Angluar-2/"/>
    
  </entry>
  
  <entry>
    <title>Laravel的基本概念</title>
    <link href="http://laozhuorun.me//blog/2017/01/Laravel%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
    <id>http://laozhuorun.me//blog/2017/01/Laravel的几个基本概念.html</id>
    <published>2017-01-22T03:43:22.000Z</published>
    <updated>2017-01-22T04:13:14.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>熟悉任何语言或框架的人一定都知道每个框架都有一个属于自己的完整的生命周期，如一些Web的基础框架，一个请求的控制流程是怎样的呢，从http请求到controller再到action中间经历了什么事情？很多相关的组件被包含在一个完整的MVC应用程序请求声明周期里，在整个请求过程中他们都扮演者非常重要的角色。尽管大部分时候我们都是用的是框架提供的默认的函数，但是如果我们能了解每个控件所扮演的角色，我们就可以轻松的扩展和使用自己实现的方法。</p>
<p>PHP的运行模式有两种：</p>
<ul>
<li>CLI（命令行）模式：如在终端执行PHP命令处理任务</li>
<li>WEB模式：如使用Nginx作为宿主处理一个到来的请求时，PHP-fpm/cgi会调用PHP运行，此时使用的是WEB模式。</li>
</ul>
<p>本次我们主要了解WEB模式的生命周期</p>
<blockquote>
<p>当我们请求一个PHP文件时，比如Laravel 的public\index.php文件时，PHP 为了完成这次请求，会发生5个阶段的生命周期切换：</p>
<ol>
<li>模块初始化（MINIT），即调用<code>php.ini</code>中指明的扩展的初始化函数进行初始化工作，如<code>mysql</code>扩展等。</li>
<li>请求初始化（RINIT），即初始化为执行本次脚本所需要的变量名称和变量值内容的符号表，如<code>$_SESSION</code>变量。</li>
<li>执行该PHP脚本。</li>
<li>请求处理完成(Request Shutdown)，按顺序调用各个模块的<code>RSHUTDOWN</code>方法，对每个变量调用<code>unset</code>函数，如unset <code>$_SESSION</code>变量。</li>
<li>关闭模块(Module Shutdown) ， PHP调用每个扩展的<code>MSHUTDOWN</code>方法，这是各个模块最后一次释放内存的机会。这意味着没有下一个请求了。</li>
</ol>
</blockquote>
<p>WEB模式和CLI（命令行）模式执行的结果基本相似，主要的区别在于：CLI 模式会在每次脚本执行经历完整的5个周期，因为你脚本执行完不会有下一个请求；而WEB模式为了应对并发，可能采用多线程，因此生命周期<code>1</code>和<code>5</code>有可能只执行一次，下次请求到来时重复<code>2-4</code>的生命周期，这样就节省了系统模块初始化所带来的时间和资源开销。</p>
<p>（未完待续）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;p&gt;熟悉任何语言或框架的人一定都知道每个框架都有一个属于自己的完整的生命周期，如一些Web的基础框架，一个请求的控制流程是怎样的
    
    </summary>
    
      <category term="PHP" scheme="http://laozhuorun.me/categories/PHP/"/>
    
      <category term="Laravel" scheme="http://laozhuorun.me/categories/PHP/Laravel/"/>
    
    
      <category term="Laravel" scheme="http://laozhuorun.me/tags/Laravel/"/>
    
      <category term="PHP" scheme="http://laozhuorun.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Laravel简介</title>
    <link href="http://laozhuorun.me//blog/2017/01/Laravel%E7%AE%80%E4%BB%8B.html"/>
    <id>http://laozhuorun.me//blog/2017/01/Laravel简介.html</id>
    <published>2017-01-22T01:37:25.000Z</published>
    <updated>2017-01-22T03:43:08.657Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ok0d190vi.bkt.clouddn.com/1ad5ad6eddc451dae74e4b1db6fd5266d116328f.jpg" alt="laravel"></p>
<h1 id="Laravel-是什么"><a href="#Laravel-是什么" class="headerlink" title="Laravel 是什么"></a>Laravel 是什么</h1><p>Laravel 是使用 PHP 语言编写的网页程序开发框架，目的是为开发者提供常用组件，简化网页程序的开发。只需编写较少的代码，就能实现其他编程语言或框架难以企及的功能。经验丰富的 PHP 程序员会发现，Laravel 让程序开发变得更有乐趣。</p>
<p>Laravel 哲学</p>
<ul>
<li>Laravel 是一套富有表达性且具有简洁语法的网页应用程序框架。我们认为开发过程应该是愉悦且有创造性的体验。Laravel 努力减少开发过程中的不便，因此我们提供了验证(authentication)、路由(routing)、sessions、缓存(caching)等开发过程中经常用到的工具或功能。</li>
<li>Laravel 目标是给开发者创造一个愉快的开发过程，并且不牺牲应用程序的功能性。快乐的开发者才能创造最棒的代码。为了这个目的，我们竭取了各框架的优点集中到 Laravel 中，这些框架包括并不局限于 Ruby on Rails、ASP.NET MVC 和 Sinatra 等。</li>
<li>Laravel 是易于理解且强大的，它提供了强大的工具来开发大型、稳健的应用程序。杰出的 IOC、数据库迁移工具和紧密集成的单元测试，这些工具赋予您构建任何大小规模的应用程序的能力。</li>
</ul>
<h1 id="基于Laravel的微服务框架–Lumen"><a href="#基于Laravel的微服务框架–Lumen" class="headerlink" title="基于Laravel的微服务框架–Lumen"></a>基于Laravel的微服务框架–Lumen</h1><p> <a href="http://lumen.laravel.com/" target="_blank" rel="external">Lumen</a> 是一个全新的、由 Taylor Otwell 设计的 PHP 框架，主要面向构建快速的微服务（micro-services）和 API 系统。如果你要的就是速度，那么 Lumen 可能是一个最佳选择。Lumen只专注于提供无状态的 JSON API。因此，框架将不再支持会话（<a href="http://laravelacademy.org/tags/session" target="_blank" rel="external">Session</a>）和<a href="http://laravelacademy.org/tags/%e8%a7%86%e5%9b%be" target="_blank" rel="external">视图</a>（View），如果要使用这些功能，需要使用完整的 Laravel 框架。将 Lumen <a href="http://laravelacademy.org/tags/%e5%8d%87%e7%ba%a7" target="_blank" rel="external">升级</a>到 Laravel 很简单：只需要将你的路由和代码类拷贝到新安装的 Laravel 应用，由于 Laravel 和 Lumen 共用很多组件，你自己编写的代码类基本不需要做什么修改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ok0d190vi.bkt.clouddn.com/1ad5ad6eddc451dae74e4b1db6fd5266d116328f.jpg&quot; alt=&quot;laravel&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Laravel-是什么&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="PHP" scheme="http://laozhuorun.me/categories/PHP/"/>
    
      <category term="laravel" scheme="http://laozhuorun.me/categories/PHP/laravel/"/>
    
    
      <category term="Laravel" scheme="http://laozhuorun.me/tags/Laravel/"/>
    
      <category term="PHP" scheme="http://laozhuorun.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>创建第一个ABP项目</title>
    <link href="http://laozhuorun.me//blog/2017/01/%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAABP%E9%A1%B9%E7%9B%AE.html"/>
    <id>http://laozhuorun.me//blog/2017/01/创建第一个ABP项目.html</id>
    <published>2017-01-19T08:03:42.000Z</published>
    <updated>2017-01-19T08:09:04.164Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ok0d190vi.bkt.clouddn.com/abp_logo.png" alt="ABP Logo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ok0d190vi.bkt.clouddn.com/abp_logo.png&quot; alt=&quot;ABP Logo&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term=".Net" scheme="http://laozhuorun.me/categories/Net/"/>
    
      <category term="ABP" scheme="http://laozhuorun.me/categories/Net/ABP/"/>
    
    
      <category term="ABP" scheme="http://laozhuorun.me/tags/ABP/"/>
    
      <category term=".Net" scheme="http://laozhuorun.me/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>基于DDD的现代ASP.NET开发框架--ABP简介</title>
    <link href="http://laozhuorun.me//blog/2017/01/ABP%E7%AE%80%E4%BB%8B.html"/>
    <id>http://laozhuorun.me//blog/2017/01/ABP简介.html</id>
    <published>2017-01-18T07:50:16.000Z</published>
    <updated>2017-01-19T08:09:06.149Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ok0d190vi.bkt.clouddn.com/abp_logo.png" alt="ABP Logo"></p>
<p>PS：此文章内容大部分采自 <a href="http://home.cnblogs.com/u/mienreal/" target="_blank" rel="external">阳光铭睿</a> 的Blog，因为大部分都是概念，我只是稍做修改作为自己的笔记记录下来，方便日后的学习记录</p>
<h1 id="ABP简介"><a href="#ABP简介" class="headerlink" title="ABP简介"></a>ABP简介</h1><blockquote>
<p>ABP是由土耳其人：<a href="https://github.com/hikalkan" target="_blank" rel="external">Halil İbrahim Kalkan</a> 发起的.Net 开源框架，开源在<a href="https://github.com/aspnetboilerplate" target="_blank" rel="external">Github</a>，是“ASP.NET Boilerplate Project”的简称。目前Star数量超过2K，Fork超过1K，就目前的情况来看，是.Net 阵容中Web开发最好的开源框架，没有之一   ！</p>
<p><a href="http://www.aspnetboilerplate.com" target="_blank" rel="external">ABP的官网网站</a></p>
<p><a href="https://github.com/aspnetboilerplate" target="_blank" rel="external">Github项目地址</a></p>
</blockquote>
<h2 id="关于ABP的由来"><a href="#关于ABP的由来" class="headerlink" title="关于ABP的由来"></a>关于ABP的由来</h2><blockquote>
<p>“DRY——避免重复代码”是一个优秀的开发者在开发软件时所具备的最重要的思想之一。我们在开发企业WEB应用程序时都有一些类似的需求，例如：都需要登录页面、用户/角色管理、权限验证、数据有效性验证、多语言/本地化等等。一个高品质的大型软件都会运用一些最佳实践，例如分层体系结构、领域驱动设计、依赖注入等。我们也可能会采用ORM、数据库迁移（Database Migrations）、日志记录（Logging）等工具。</p>
<p>从零开始创建一个企业应用程序是一件繁琐的事，因为需要重复做很多常见的基础工作。许多公司都在开发自己的应用程序框架来重用于不同的项目，然后在框架的基础上开发一些新的功能。但并不是每个公司都有这样的实力。假如我们可以分享的更多，也许可以避免每个公司或每个项目的重复编写类似的代码。作者之所以把项目命名为“ASP.NET Boilerplate”，就是希望它能成为开发一般企业WEB应用的新起点，直接把ABP作为项目模板。</p>
</blockquote>
<h2 id="ABP是什么"><a href="#ABP是什么" class="headerlink" title="ABP是什么"></a>ABP是什么</h2><blockquote>
<p>ABP是为新的现代Web应用程序使用最佳实践和使用最流行工具的一个起点。可作为一般用途的应用程序的基础框架或项目模板。它的功能包括：</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul>
<li>基于最新的.NET技术 （ASP.NET MVC 5、Web API 2、C# 5.0、.Net Framework/Core）</li>
<li>实现领域驱动设计（实体、仓储、领域服务、领域事件、应用服务、数据传输对象，工作单元等等）</li>
<li>实现分层体系结构（领域层，应用层，展现层和基础设施层）</li>
<li>提供了一个基础架构来开发可重用可配置的模块</li>
<li>集成一些最流行的开源框架/库，也许有些是你正在使用的。</li>
<li>提供了一个基础架构让我们很方便地使用依赖注入（使用Castle Windsor作为依赖注入的容器）</li>
<li>提供Repository仓储模式支持不同的ORM（已实现Entity Framework 、NHibernate、MangoDb和内存数据库）</li>
<li>支持并实现数据库迁移（EF 的 Code first）</li>
<li>集成缓存服务(MachineCache，Redis等)</li>
<li>模块化开发（每个模块有独立的EF DbContext，可单独指定数据库）</li>
<li>包括一个简单的和灵活的多语言/本地化系统</li>
<li>包括一个 EventBus来实现服务器端全局的领域事件</li>
<li>统一的异常处理（应用层几乎不需要处理自己写异常处理代码）</li>
<li>数据有效性验证（Asp.NET MVC只能做到Action方法的参数验证，ABP实现了Application层方法的参数有效性验证）</li>
<li>通过Application Services自动创建Web Api层（不需要写ApiController层了）</li>
<li>提供基类和帮助类让我们方便地实现一些常见的任务</li>
<li>使用“约定优于配置原则”</li>
</ul>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul>
<li>Bootstrap、Less、AngularJs2、jQuery、Modernizr 和其他JS库: jQuery.validate、jQuery.form、jQuery.blockUI、json2等</li>
<li>为单页面应用程序（AngularJs、Durandaljs）和多页面应用程序（Bootstrap+Jquery）提供了项目模板。</li>
<li>自动创建Javascript 的代理层来更方便使用Web Api</li>
<li>封装一些Javascript 函数，更方便地使用ajax、消息框、通知组件、请求状态遮罩层等等</li>
</ul>
</blockquote>
<h2 id="除了ABP，作者还开发了以下项目"><a href="#除了ABP，作者还开发了以下项目" class="headerlink" title="除了ABP，作者还开发了以下项目"></a>除了ABP，作者还开发了以下项目</h2><h3 id="免费开源模块-Module-zero，实现了以下功能"><a href="#免费开源模块-Module-zero，实现了以下功能" class="headerlink" title="免费开源模块 Module -zero，实现了以下功能"></a>免费开源模块 Module -zero，实现了以下功能</h3><blockquote>
<ul>
<li>身份验证与授权管理（通过ASP.NET Identity实现的）</li>
<li>用户&amp;角色管理</li>
<li>系统设置存取管理（系统级、租户级、用户级，作用范围自动管理）</li>
<li>审计日志（自动记录每一次接口的调用者和参数）</li>
</ul>
</blockquote>
<h3 id="付费授权项目-ASP-NET-ZERO"><a href="#付费授权项目-ASP-NET-ZERO" class="headerlink" title="付费授权项目 ASP.NET  ZERO"></a>付费授权项目 ASP.NET  ZERO</h3><blockquote>
<p><a href="https://www.aspnetzero.com" target="_blank" rel="external">项目官网</a></p>
<p>ASP.NET Zero 是基于ABP和Module zero，使用了Metronic UI，提供了 Material design 风格的基础实现，提供一个现代风格的Web基础项目，让你节省时间，可以更多的关注业务代码；</p>
<p>ASP.NET Zero提供了多个不同架构的项目以满足大部分人的需求</p>
<ul>
<li>基于.Net Core , Angular2.x / .Net Framework , Angular1.x 的SPA后台</li>
<li>基于.Net Core , Asp.net Mvc  / .Net Framework , Asp.net Mvc 的MPA后台</li>
<li>基于 .Net Framework/Core 和 Asp.net Mvc的MPA前台</li>
</ul>
<p>使用Asp.net Zero  你可以快速的构建一个基础的CMS项目(PS:价格有点小贵，建议个人可以通过团购的方式获取代码学习使用，但如果是企业，还是建议单独购买授权，但是zero使用的Metronic UI个人觉得并不好美观，有能力的人完全可以使用基于Vue2的Element或基于React的Ant design取代)</p>
</blockquote>
<h2 id="ABP不是什么？"><a href="#ABP不是什么？" class="headerlink" title="ABP不是什么？"></a>ABP不是什么？</h2><blockquote>
<p>ABP 提供了一个应用程序开发模型用于最佳实践。它拥有基础类、接口和工具使我们容易建立起可维护的大规模的应用程序，注意ABP并不是一个支持高并发的框架，如果对性能有非常高要求的，建议不要使用或自己修改源码优化。</p>
<p>然而：</p>
<p>它不是RAD工具之一，RAD工具的目的是无需编码创建应用程序。相反，ABP提供了一种编码的最佳实践。</p>
<p>它不是一个代码生成工具。在运行时虽然它有一些特性构建动态代码，但它不能生成代码( 可以使用工具)。</p>
<p>它不是一个一体化的框架。相反，它使用流行的工具/库来完成特定的任务（例如用EF做ORM，用Log4Net做日志记录，使得Castle Windsor作为赖注入容器， AngularJs 用于SPA 框架）。</p>
<p>就我使用了ABP几个月的经验来看，虽然ABP不是RAD，但是用它开发项目绝对比传统三层架构要快很多。</p>
<p>虽然ABP不是代码生成工具，但因为有了它，使我们项目的代码更简洁规范，这有利于使用代码生成工具。</p>
<p>我自己使用VS2015的Scaffolder+T4开发的代码生成器(<a href="http://home.cnblogs.com/u/mienreal/" target="_blank" rel="external">阳光铭睿</a>团队开发开发的ABP代码生成器)，可根据领域对象的UML类图自动生成全部前后端代码和数据库，简单的CURD模块几乎不需要编写代码，有复杂业务逻辑的模块主要补充领域层代码即可。这样就能把时间多花在领域模型的设计上，减少写代码的时间。</p>
</blockquote>
<p>参考资料</p>
<p><a href="http://www.cnblogs.com/mienreal/p/4532077.html" target="_blank" rel="external">基于DDD的现代ASP.NET开发框架–ABP系列之2、ABP入门教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ok0d190vi.bkt.clouddn.com/abp_logo.png&quot; alt=&quot;ABP Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;PS：此文章内容大部分采自 &lt;a href=&quot;http://home.cnblogs.com/u/mienreal
    
    </summary>
    
      <category term=".Net" scheme="http://laozhuorun.me/categories/Net/"/>
    
      <category term="ABP" scheme="http://laozhuorun.me/categories/Net/ABP/"/>
    
    
      <category term="ABP" scheme="http://laozhuorun.me/tags/ABP/"/>
    
      <category term=".Net" scheme="http://laozhuorun.me/tags/Net/"/>
    
  </entry>
  
</feed>
